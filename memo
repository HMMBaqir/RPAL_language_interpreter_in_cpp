

//initialize temp node
std::unique_ptr<Node> tempNode = std::unique_ptr<Node>();

Node* standardizeTree(Node* node) {
    if (currentNode == nullptr) {
        return;
    }    

    switch (currentNode->type) {
        //literals
        case ID:
        case INT:
        case STRING:
            // Do not standardize literal leaf nodes
            break;
        
        case LET:
            // Convert let expression to standardized form
            /* let                gamma
               / \                /   \
               =  P            lambda  E
              / \                / \
             X   E              X   P
            */
            
            return gamma( lambda ((node->left_child->left_child), 
                                    node->right_child)
                         , node->left_child->right_child) 



        case WHERE:
            // Convert where expression to standardized form

            /* where                                gamma
               /   \                               /     \
              P     =                          lambda     E
                   / \                            /  \
                  X   E                          X    E                                                                                             
            */            
            node->type = "LET";
            temp = node-> left_child;
            node->left_child = node->right_child;
            node->right_child = node->temp;
            
            return standardizeTree(node);

        case WITHIN :
                /*within ast to st

                within                =>           =                
                /     \                           / \                      
                =       =                        X2   gamma 
                / \     / \                            /   \                  
                Xl  El  X2 E2                       lambda   El        
                                                    /  \                           
                                                    Xl   E2 
                */

        case FCN_FORM:
            /*
                fcn_form ast to st 

                fcn_form           =>                    =                
                /   |   \                              /   \                     
                P    V+   E                            P   +lambda            
                                                            /   \                        
                                                            V    .E                         
            */



        case COND:
                /*
                -> (conditional node) ast to st ( note Cond is a special function identifier that is used here)

                  â€”>             =>        gamma
                / | \                     /    \
                B  T  E                  gamma  nil
                                        /      \
                                    gamma       lambda
                                    /   \          /  \
                                    gamma lambda  ()   E
                                    / \     / \
                                Cond  B     ()  T
                */

        case TAU:
                /*
                tau (tuples) node ast to st

                tau          =>       ++gamma              
                 |                      /   \                     
                E++                   gamma  E                   
                                     /    \ 
                                    aug  .nil 
                */                   

        case AT:
                /* 
                neg ast to st 

                neg      =>      gamma                              
                 |                /  \                    
                 E              neg   E  
                */

        case REC:
                /*
                rec (recursive function definition) node ast to st (note Ystar a special function identifier that is used here)  

                 rec     =>      =
                /  \           /  \
                X   E         X   gamma
                                  /    \
                                Ystar   lambda    
                                        /   \
                                       X     E
                */

        case AND:
                /*
                and node transformed from ast to tree with , (comma) , tau and = (assign) node , these nodes will be standardized later

                and         =>            =            
                 |                      /   \  
                =++                    ,    tau                      
                /  \                   |     |            
                X   E                 X++    E++        
                
                */

        case COMMA:

                /*      , (comma) node transformed from ast to st
                        
                    
                    lambda        =>       lambda
                    /   \                  /    \
                    ,    E               Temp  ++gamma
                  /  \                         /      \ 
                X++   i                      lambda  gamma
                                            /  \     /   \
                                        X.i    .E  Temp  <INTEGER:i>
                        */
        
        case LAMBDA:
                    /*
                    lambda with multiple variables (children in the ast) from ast to st                  

                    lambda =>   ++lambda                                   
                     /    \        /  \                       
                    V++   E       V   .E           
                    
                    */
        case AT:
                /*
                @ or  (infix) or AT node (this takes the second element as a function and applies E1 as first parameter and E2 as second parameter  )

                  AT            =>          gamma
                / |  \                     /    \
              El  N  E2                 gamma    E2
                                         / \
                                        N   El
                                        
                                        */
        case NOT:
        case  NEG:
                /*not from ast to st

                not/neg      =>         gamma          
                 |                      /   \        
                 E                 not/neg   E    
                */

        case AUG:
        case OR:
        case BOOLAND:

        case PLUS:
        case MINUS:
        case DIV:
        case POW:
        case TIMES:

        case GR:
        case GE:
        case LS:
        case LE:
        case EQ:
        case NE:
                /*
                Op(binary operator) from ast to st

                 Op       =>      gamma
                /  \              /   \
               El  E2          gamma   E2
                                /  \
                              Op   El

                */
                }
    
}
